import axios from "axios";
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { API_URL } from "../constant";

export default function NewsPage() {
  const [news, setNews] = useState([]);
  const [user, setUser] = useState({});
  const [search, setSearch] = useState("");
  const [topics, setTopics] = useState([]);
  const [error, setError] = useState({});
  const [keywordModal, setKeywordModal] = useState(false);
  const [subscribedPage, setSubscribedPage] = useState(0);
  const [selectedDigestUsers, setSelectedDigestUsers] = useState([]);
  const [digestModal, setDigestModal] = useState(false);
  const [activeTab, setActiveTab] = useState("daily"); // 'daily' or 'logs'
  const [emailContent, setEmailContent] = useState("");
  const [emailPreview, setEmailPreview] = useState(false);
  const [logs, setLogs] = useState([]);
  const [configurations, setConfigurations] = useState([]);
  const [selectedModel, setSelectedModel] = useState("gemini"); // 'gemini' or 'openai'

  const navigate = useNavigate();

  // Dummy data
  const subscribedUsers = [
    { name: "El Armandio", avatar: "https://i.pravatar.cc/40?img=1", email: "user1@example.com" },
    { name: "Cindy Pratama", avatar: "https://i.pravatar.cc/40?img=2", email: "user2@example.com" },
    { name: "Rizky Saputra", avatar: "https://i.pravatar.cc/40?img=3", email: "user3@example.com" },
    { name: "Dewi Lestari", avatar: "https://i.pravatar.cc/40?img=4", email: "user4@example.com" },
    { name: "Budi Santoso", avatar: "https://i.pravatar.cc/40?img=5", email: "user5@example.com" },
  ];

  const newsItems = [
    {
      id: 1,
      title: "AI–Native Test Automation is Here",
      summary: "The latest advancements in AI-native test automation are revolutionizing software testing.",
      source: "Tech News",
      link: "https://example.com/news/1",
      date: "2023-05-15",
      author: "Cindy",
      image: "https://source.unsplash.com/random/300x200?tech"
    },
    {
      id: 2,
      title: "The Future of Quantum Computing",
      summary: "Quantum computing breakthroughs promise to solve previously intractable problems.",
      source: "Science Daily",
      link: "https://example.com/news/2",
      date: "2023-05-14",
      author: "John",
      image: "https://source.unsplash.com/random/300x200?quantum"
    }
  ];

  const logEntries = [
    {
      id: 1,
      email: "user1@example.com",
      keyword: "AI",
      title: "AI–Native Test Automation is Here",
      summary: "The latest advancements in AI-native test automation...",
      source: "Tech News",
      link: "https://example.com/news/1",
      date: "2023-05-15T10:30:00Z"
    },
    {
      id: 2,
      email: "user2@example.com",
      keyword: "Quantum Computing",
      title: "The Future of Quantum Computing",
      summary: "Quantum computing breakthroughs promise...",
      source: "Science Daily",
      link: "https://example.com/news/2",
      date: "2023-05-14T14:45:00Z"
    }
  ];

  const configItems = [
    {
      id: 1,
      email_send_to: "user1@example.com,user2@example.com",
      prompt_to_send_llm: "Latest AI news",
      model: "gemini",
      result_language_code: "en"
    },
    {
      id: 2,
      email_send_to: "user3@example.com",
      prompt_to_send_llm: "Quantum computing updates",
      model: "openai",
      result_language_code: "en"
    }
  ];

  useEffect(() => {
    fetchNews();
    fetchConfigurations();
    fetchLogs();
  }, []);

  function fetchNews() {
    axios.get(API_URL + "/news")
      .then((res) => setNews(res.data))
      .catch((err) => {
        if (err.response?.status === 401) {
          localStorage.clear();
          navigate("/");
        }
        setError(err.response.data);
      });
  }

  function fetchConfigurations() {
    // Simulate API call
    setTimeout(() => {
      setConfigurations(configItems);
    }, 500);
  }

  function fetchLogs() {
    // Simulate API call
    setTimeout(() => {
      setLogs(logEntries);
    }, 500);
  }

  function handleDigestUser(user) {
    setSelectedDigestUsers((prev) =>
      prev.find((u) => u.email === user.email)
        ? prev.filter((u) => u.email !== user.email)
        : [...prev, user]
    );
  }

  function generateEmailContent() {
    // This would be generated by the AI in a real implementation
    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; border: 1px solid #e0e0e0; border-radius: 8px; overflow: hidden;">
        <div style="background: #4CAF50; color: white; padding: 20px; text-align: center;">
          <h1>StarCore News Digest</h1>
          <p>${new Date().toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</p>
        </div>
        <div style="padding: 20px;">
          <h2>Latest AI news</h2>
          <div style="margin-bottom: 20px; padding-bottom: 20px; border-bottom: 1px solid #e0e0e0;">
            <h3>AI–Native Test Automation is Here</h3>
            <p>The latest advancements in AI-native test automation are revolutionizing software testing.</p>
            <a href="https://example.com/news/1" style="color: #4CAF50; text-decoration: none;">Read more →</a>
          </div>
          <div style="text-align: center; margin-top: 20px; color: #757575; font-size: 12px;">
            <p>This email was sent by StarCore News Digest</p>
            <p>© ${new Date().getFullYear()} StarCore. All rights reserved.</p>
          </div>
        </div>
      </div>
    `;
    setEmailContent(html);
    return html;
  }

  function sendDigest() {
    const content = generateEmailContent();
    const emails = selectedDigestUsers.map(user => user.email).join(', ');
    
    // Simulate API call to send emails
    console.log(`Sending digest to: ${emails}`);
    console.log('Email content:', content);
    
    // Simulate adding to logs
    const newLog = {
      id: logs.length + 1,
      email: emails,
      keyword: "AI News",
      title: "Daily Digest",
      summary: "Latest news about AI and technology",
      source: "StarCore",
      link: "https://starcore.example.com",
      date: new Date().toISOString()
    };
    
    setLogs([newLog, ...logs]);
    setDigestModal(false);
    setSelectedDigestUsers([]);
  }

  return (
    <div className="min-h-screen bg-gray-50 text-gray-800">
      {/* Header */}
      <header className="bg-white shadow-sm py-4 px-6 flex justify-between items-center">
        <div className="flex items-center space-x-2">
          <svg
            className="w-6 h-6 text-green-600"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
            />
          </svg>
          <h1 className="text-2xl font-bold text-gray-800">StarCore</h1>
        </div>
        <div className="flex items-center space-x-6">
          <button className="relative">
            <svg
              className="w-6 h-6 text-gray-500"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"
              />
            </svg>
            <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-4 w-4 flex items-center justify-center">
              3
            </span>
          </button>
          <div className="flex items-center space-x-2">
            <img
              src="https://i.pravatar.cc/40?img=3"
              alt="User"
              className="rounded-full w-8 h-8"
            />
            <span className="text-sm font-medium">John Doe</span>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-6 py-8">
        <div className="flex flex-col lg:flex-row gap-8">
          {/* Main Content */}
          <div className="lg:w-2/3">
            <div className="flex justify-between items-center mb-8">
              <h2 className="text-2xl font-bold text-gray-800">
                StarCore News Digest
              </h2>
              <div className="flex space-x-4">
                <button 
                  className={`px-4 py-2 rounded-full text-sm font-medium transition-colors ${activeTab === 'daily' ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-700'}`}
                  onClick={() => setActiveTab('daily')}
                >
                  Daily News
                </button>
                <button 
                  className={`px-4 py-2 rounded-full text-sm font-medium transition-colors ${activeTab === 'logs' ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-700'}`}
                  onClick={() => setActiveTab('logs')}
                >
                  Email Logs
                </button>
                <button 
                  className={`px-4 py-2 rounded-full text-sm font-medium transition-colors ${activeTab === 'config' ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-700'}`}
                  onClick={() => setActiveTab('config')}
                >
                  Configurations
                </button>
              </div>
            </div>

            {/* Search Bar */}
            <div className="relative mb-8">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg
                  className="w-5 h-5 text-gray-400"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                  />
                </svg>
              </div>
              <input
                type="text"
                placeholder={activeTab === 'daily' ? "Search news..." : activeTab === 'logs' ? "Search logs..." : "Search configurations..."}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
              />
            </div>

            {activeTab === 'daily' && (
              <>
                <h3 className="text-xl font-bold mb-6 text-gray-800">
                  Daily News Summaries
                </h3>
                <div className="space-y-6">
                  {newsItems.map((item) => (
                    <div key={item.id} className="bg-white p-6 rounded-lg shadow-sm hover:shadow-md transition-shadow">
                      <div className="flex flex-col md:flex-row gap-6">
                        <div className="md:w-3/4">
                          <div className="flex items-center space-x-2 mb-2">
                            <span className="text-xs text-gray-500">by {item.author}</span>
                            <span className="text-xs text-gray-300">•</span>
                            <span className="text-xs text-gray-500">{item.date}</span>
                          </div>
                          <h4 className="font-bold text-lg mb-2">{item.title}</h4>
                          <p className="text-gray-600 mb-4">{item.summary}</p>
                          <div className="flex space-x-3">
                            <button className="flex items-center text-green-600 text-sm font-medium">
                              <svg
                                className="w-4 h-4 mr-1"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  strokeWidth={2}
                                  d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"
                                />
                              </svg>
                              Copy Summary
                            </button>
                            <button 
                              className="flex items-center text-blue-600 text-sm font-medium"
                              onClick={() => {
                                setSelectedDigestUsers([{ email: "user@example.com", name: "Current User" }]);
                                setDigestModal(true);
                              }}
                            >
                              <svg
                                className="w-4 h-4 mr-1"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                                xmlns="http://www.w3.org/2000/svg"
                              >
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  strokeWidth={2}
                                  d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                                />
                              </svg>
                              Send as Digest
                            </button>
                          </div>
                        </div>
                        <div className="md:w-1/4">
                          <img
                            src={item.image}
                            alt="News thumbnail"
                            className="w-full h-32 object-cover rounded"
                          />
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </>
            )}

            {activeTab === 'logs' && (
              <>
                <h3 className="text-xl font-bold mb-6 text-gray-800">
                  Email Logs
                </h3>
                <div className="bg-white rounded-lg shadow-sm overflow-hidden">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Recipient</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Keyword</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {logs.map((log) => (
                        <tr key={log.id} className="hover:bg-gray-50">
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {new Date(log.date).toLocaleString()}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {log.email}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {log.keyword}
                          </td>
                          <td className="px-6 py-4 text-sm text-gray-500">
                            {log.title}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            <button 
                              className="text-green-600 hover:text-green-800"
                              onClick={() => {
                                setEmailContent(generateEmailContent());
                                setEmailPreview(true);
                              }}
                            >
                              View
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </>
            )}

            {activeTab === 'config' && (
              <>
                <h3 className="text-xl font-bold mb-6 text-gray-800">
                  Configurations
                </h3>
                <div className="bg-white rounded-lg shadow-sm overflow-hidden">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Recipients</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Prompt</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Model</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Language</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {configurations.map((config) => (
                        <tr key={config.id} className="hover:bg-gray-50">
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {config.email_send_to}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {config.prompt_to_send_llm}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            <span className={`px-2 py-1 rounded-full text-xs ${config.model === 'gemini' ? 'bg-blue-100 text-blue-800' : 'bg-purple-100 text-purple-800'}`}>
                              {config.model}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            {config.result_language_code}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            <button className="text-green-600 hover:text-green-800 mr-3">Edit</button>
                            <button className="text-red-600 hover:text-red-800">Delete</button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
                <div className="mt-4 flex justify-end">
                  <button 
                    className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded text-sm font-medium transition-colors"
                    onClick={() => setKeywordModal(true)}
                  >
                    Add Configuration
                  </button>
                </div>
              </>
            )}
          </div>

          {/* Sidebar */}
          <div className="lg:w-1/3">
            {/* Subscribed Section */}
            <div className="bg-white p-6 rounded-lg shadow-sm mb-6">
              <h3 className="font-bold text-gray-800 mb-4">Subscribed</h3>
              <div className="relative mb-4">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg
                    className="w-5 h-5 text-gray-400"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                    />
                  </svg>
                </div>
                <input
                  type="text"
                  placeholder="Search subscriptions..."
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                />
              </div>
              <div className="space-y-3 mb-4 max-h-60 overflow-y-auto">
                {subscribedUsers.map((user) => {
                  const isSelected = selectedDigestUsers.some(u => u.email === user.email);
                  return (
                    <div
                      key={user.email}
                      className={`flex items-center justify-between p-2 rounded transition-colors ${isSelected ? 'bg-green-50' : 'hover:bg-gray-50'}`}
                    >
                      <div className="flex items-center space-x-3">
                        <img
                          src={user.avatar}
                          alt="User"
                          className="rounded-full w-8 h-8"
                        />
                        <div>
                          <p className="text-sm">{user.name}</p>
                          <p className="text-xs text-gray-500">{user.email}</p>
                        </div>
                      </div>
                      <button
                        onClick={() => handleDigestUser(user)}
                        className={`w-6 h-6 rounded-full flex items-center justify-center ${isSelected ? 'bg-green-500 text-white' : 'border border-gray-300 text-gray-400 hover:bg-green-100 hover:text-green-600'}`}
                      >
                        {isSelected ? (
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                          </svg>
                        ) : (
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                          </svg>
                        )}
                      </button>
                    </div>
                  );
                })}
              </div>
              <div className="flex justify-between items-center">
                <div className="text-sm text-gray-500">
                  {selectedDigestUsers.length} selected
                </div>
                <button
                  className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-full text-sm font-medium transition-colors disabled:opacity-50"
                  onClick={() => setDigestModal(true)}
                  disabled={selectedDigestUsers.length === 0}
                >
                  Send Digest
                </button>
              </div>
            </div>

            {/* Model Selection */}
            <div className="bg-white p-6 rounded-lg shadow-sm mb-6">
              <h3 className="font-bold text-gray-800 mb-4">AI Model</h3>
              <div className="space-y-3">
                <div 
                  className={`p-3 border rounded-lg cursor-pointer transition-colors ${selectedModel === 'gemini' ? 'border-green-500 bg-green-50' : 'border-gray-200 hover:bg-gray-50'}`}
                  onClick={() => setSelectedModel('gemini')}
                >
                  <div className="flex items-center space-x-3">
                    <div className={`w-4 h-4 rounded-full border flex items-center justify-center ${selectedModel === 'gemini' ? 'border-green-500 bg-green-500' : 'border-gray-300'}`}>
                      {selectedModel === 'gemini' && (
                        <svg className="w-2 h-2 text-white" fill="currentColor" viewBox="0 0 8 8">
                          <circle cx="4" cy="4" r="3" />
                        </svg>
                      )}
                    </div>
                    <div>
                      <p className="font-medium">Google Gemini</p>
                      <p className="text-xs text-gray-500">Advanced AI model by Google</p>
                    </div>
                  </div>
                </div>
                <div 
                  className={`p-3 border rounded-lg cursor-pointer transition-colors ${selectedModel === 'openai' ? 'border-green-500 bg-green-50' : 'border-gray-200 hover:bg-gray-50'}`}
                  onClick={() => setSelectedModel('openai')}
                >
                  <div className="flex items-center space-x-3">
                    <div className={`w-4 h-4 rounded-full border flex items-center justify-center ${selectedModel === 'openai' ? 'border-green-500 bg-green-500' : 'border-gray-300'}`}>
                      {selectedModel === 'openai' && (
                        <svg className="w-2 h-2 text-white" fill="currentColor" viewBox="0 0 8 8">
                          <circle cx="4" cy="4" r="3" />
                        </svg>
                      )}
                    </div>
                    <div>
                      <p className="font-medium">OpenAI GPT</p>
                      <p className="text-xs text-gray-500">Powerful language model by OpenAI</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Recommended Topics */}
            <div className="bg-white p-6 rounded-lg shadow-sm">
              <h3 className="font-bold text-gray-800 mb-4">
                Recommended Topics
              </h3>
              <div className="flex flex-wrap gap-2 mb-4">
                {["Technology", "Business", "Science", "Health", "Sports"].map(
                  (topic, i) => (
                    <span
                      key={i}
                      className="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm hover:bg-green-100 hover:text-green-700 cursor-pointer transition-colors"
                    >
                      {topic}
                    </span>
                  )
                )}
              </div>
              <button className="text-green-600 text-sm font-medium flex items-center">
                See more topics
                <svg
                  className="w-4 h-4 ml-1"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 5l7 7-7 7"
                  />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Add Keyword/Configuration Modal */}
      {keywordModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-bold mb-4">Add Configuration</h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Recipients (comma separated)</label>
                <input
                  type="text"
                  placeholder="user1@example.com, user2@example.com"
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Prompt</label>
                <input
                  type="text"
                  placeholder="Latest news about AI"
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">AI Model</label>
                <select className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent">
                  <option value="gemini">Google Gemini</option>
                  <option value="openai">OpenAI GPT</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Language</label>
                <select className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent">
                  <option value="en">English</option>
                  <option value="id">Indonesian</option>
                </select>
              </div>
            </div>
            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={() => setKeywordModal(false)}
                className="px-4 py-2 text-gray-700 rounded hover:bg-gray-100"
              >
                Cancel
              </button>
              <button 
                className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
                onClick={() => {
                  // In a real app, this would save the configuration
                  setKeywordModal(false);
                }}
              >
                Save Configuration
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Digest Modal */}
      {digestModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-bold mb-4">Send News Digest</h3>
            <div className="mb-4">
              <p className="text-sm text-gray-600 mb-2">Recipients:</p>
              <div className="max-h-40 overflow-y-auto border rounded-lg p-2">
                {selectedDigestUsers.map((user) => (
                  <div key={user.email} className="flex items-center justify-between p-2 hover:bg-gray-50">
                    <div className="flex items-center space-x-2">
                      <img src={user.avatar} alt="User" className="w-6 h-6 rounded-full" />
                      <span className="text-sm">{user.name}</span>
                    </div>
                    <span className="text-xs text-gray-500">{user.email}</span>
                  </div>
                ))}
              </div>
            </div>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">Subject</label>
              <input
                type="text"
                defaultValue="StarCore Daily Digest"
                className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
              />
            </div>
            <div className="flex justify-end space-x-3">
              <button
                onClick={() => setDigestModal(false)}
                className="px-4 py-2 text-gray-700 rounded hover:bg-gray-100"
              >
                Cancel
              </button>
              <button
                className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
                onClick={sendDigest}
              >
                Send Digest
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Email Preview Modal */}
      {emailPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-bold">Email Preview</h3>
              <button 
                onClick={() => setEmailPreview(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div 
              className="border rounded-lg p-4"
              dangerouslySetInnerHTML={{ __html: emailContent }}
            />
            <div className="mt-4 flex justify-end">
              <button
                className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
                onClick={() => setEmailPreview(false)}
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}